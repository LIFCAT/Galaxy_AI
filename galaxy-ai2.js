class GalaxyAI {
    constructor() {
        this.currentMode = 'galaxy';
        this.init();
    }

    init() {
        this.setupEventListeners();
        this.loadHistory();
        this.updateAIStatus("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");
    }

    async getAIResponse(userMessage) {
        if (this.currentMode !== 'galaxy') {
            return "üîë –î–ª—è —ç—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω—É–∂–µ–Ω API –∫–ª—é—á";
        }

        const apis = [
            {
                url: 'https://chatgpt.h7ml.cn/v1/chat/completions',
                data: {model: "gpt-3.5-turbo", messages: [{role: "user", content: userMessage}], max_tokens: 500}
            },
            {
                url: 'https://api.inferencehub.xyz/v1/chat/completions',
                data: {model: "gpt-3.5-turbo", messages: [{role: "user", content: userMessage}], max_tokens: 400}
            },
            {
                url: 'https://free.gpt.ge/v1/chat/completions',
                data: {model: "gpt-3.5-turbo", messages: [{role: "user", content: userMessage}], max_tokens: 300}
            },
            {
                url: 'https://api.openai-proxy.org/v1/chat/completions',
                data: {model: "gpt-3.5-turbo", messages: [{role: "user", content: userMessage}], max_tokens: 350}
            }
        ];

        for (let i = 0; i < apis.length; i++) {
            try {
                this.updateAIStatus(`API ${i+1}/${apis.length}`);
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), 8000);
                
                const response = await fetch(apis[i].url, {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify(apis[i].data),
                    signal: controller.signal
                });
                
                clearTimeout(timeoutId);

                if (response.ok) {
                    const data = await response.json();
                    let aiResponse = '';
                    if (data.choices && data.choices[0] && data.choices[0].message) {
                        aiResponse = data.choices[0].message.content;
                    } else if (data.content) {
                        aiResponse = data.content;
                    } else if (data.text) {
                        aiResponse = data.text;
                    } else {
                        aiResponse = "ü§ñ –û—Ç–≤–µ—Ç –æ—Ç –ò–ò –ø–æ–ª—É—á–µ–Ω";
                    }
                    return aiResponse;
                }
            } catch (error) {
                continue;
            }
        }

        throw new Error("–í—Å–µ –ò–ò —Å–µ—Ä–≤–µ—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã");
    }

    setupEventListeners() {
        document.getElementById('sendButton').addEventListener('click', () => this.sendMessage());
        document.getElementById('userInput').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') this.sendMessage();
        });
    }

    loadHistory() {
        const history = JSON.parse(localStorage.getItem("galaxyAIHistory")) || [];
        const chat = document.getElementById("chat");
        chat.innerHTML = "";
        
        if (history.length === 0) {
            this.addMessage("bot", "üöÄ Galaxy AI v2.0\n\n–†–∞–±–æ—Ç–∞—é –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º –ò–ò!\n\n–ó–∞–¥–∞–≤–∞–π—Ç–µ –õ–Æ–ë–´–ï –≤–æ–ø—Ä–æ—Å—ã! ü§ñ");
        } else {
            history.forEach(msg => {
                this.addMessage("user", msg.user);
                this.addMessage("bot", msg.bot);
            });
        }
    }

    addMessage(sender, text) {
        const chat = document.getElementById("chat");
        const messageDiv = document.createElement("div");
        messageDiv.className = `message ${sender}-message`;
        messageDiv.textContent = text;
        chat.appendChild(messageDiv);
        chat.scrollTop = chat.scrollHeight;
    }

    updateAIStatus(status) {
        const statusElement = document.getElementById("aiStatus");
        if (statusElement) {
            statusElement.textContent = `AI: ${status}`;
        }
    }

    async sendMessage() {
        const input = document.getElementById("userInput");
        const message = input.value.trim();
        
        if (!message) return;

        this.addMessage("user", message);
        input.value = "";
        this.updateAIStatus("–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –ò–ò...");

        try {
            const response = await this.getAIResponse(message);
            this.addMessage("bot", response);
            
            const history = JSON.parse(localStorage.getItem("galaxyAIHistory")) || [];
            history.push({
                user: message,
                bot: response,
                time: new Date().toLocaleTimeString('ru-RU')
            });
            localStorage.setItem("galaxyAIHistory", JSON.stringify(history));
            
        } catch (error) {
            this.addMessage("bot", "‚ùå –í—Å–µ –ò–ò —Å–µ—Ä–≤–µ—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ");
        }

        this.updateAIStatus("–ì–æ—Ç–æ–≤");
    }
}

function setMode(mode) {
    if (window.galaxyAI) {
        window.galaxyAI.currentMode = mode;
        document.getElementById('modeIndicator').textContent = 
            mode === 'galaxy' ? 'üöÄ Galaxy AI' : 
            mode === 'yandex' ? 'üî∑ Yandex GPT' : 'üî∂ OpenAI GPT';
    }
}

function toggleMenu() {
    const menu = document.getElementById("menuPanel");
    menu.style.display = menu.style.display === "block" ? "none" : "block";
}

function clearHistory() {
    if (confirm("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞?")) {
        localStorage.removeItem("galaxyAIHistory");
        if (window.galaxyAI) {
            window.galaxyAI.loadHistory();
        }
    }
}

document.addEventListener('DOMContentLoaded', () => {
    window.galaxyAI = new GalaxyAI();
});
